name: pytest

on:
  push:
    branches:
      - master
      - hotfixes
      - develop
      - workshop
  pull_request:
    branches:
      - master
      - hotfixes
      - develop
      - workshop

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        debian-version: ["11", "12"]
        include:
          - debian-version: "11"
            python-version: "3.9"
            postgres-version: 13
            postgis-version: 3.2
          - debian-version: "12"
            python-version: "3.9"
            postgres-version: 15
            postgis-version: 3.3

    name: Debian ${{ matrix.debian-version }}

    services:
      postgres:
        image: postgis/postgis:${{ matrix.postgres-version }}-${{ matrix.postgis-version }}
        env:
          POSTGRES_DB: geonature2db
          POSTGRES_PASSWORD: geonatpasswd
          POSTGRES_USER: geonatadmin
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Add postgis_raster database extension
        if: ${{ matrix.postgis-version >= 3 }}
        run: |
          psql -h localhost -U geonatadmin -d geonature2db -tc 'CREATE EXTENSION "postgis_raster";'
        env:
          PGPASSWORD: geonatpasswd
      - name: Add database extensions
        run: |
          psql -h localhost -U geonatadmin -d geonature2db -tc 'CREATE EXTENSION "hstore";'
          psql -h localhost -U geonatadmin -d geonature2db -tc 'CREATE EXTENSION "uuid-ossp";'
          psql -h localhost -U geonatadmin -d geonature2db -tc 'CREATE EXTENSION "pg_trgm";'
          psql -h localhost -U geonatadmin -d geonature2db -tc 'CREATE EXTENSION "unaccent";'
        env:
          PGPASSWORD: geonatpasswd
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install GDAL
        run: |
          sudo apt update
          sudo apt install -y libgdal-dev
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install \
            -e ..[tests] \
            -r requirements-dev.txt
        working-directory: ./dependencies/GeoNature/backend
      - name: Install database
        run: |
          geonature db upgrade geonature@head -x local-srid=2154
          geonature db autoupgrade -x local-srid=2154
          geonature taxref import-v15 --skip-bdc-statuts
          geonature db upgrade geonature-samples@head
          geonature db upgrade nomenclatures_taxonomie_data@head
          geonature db upgrade ref_geo_fr_departments@head
          geonature db upgrade ref_geo_fr_municipalities@head
          geonature db upgrade ref_geo_inpn_grids_10@head
        env:
          GEONATURE_CONFIG_FILE: dependencies/GeoNature/config/test_config.toml
      - name: Install export module backend
        run: |
          pip install -r requirements-dev.in
          pip install .
      - name: Install import module database
        run: |
          geonature upgrade-modules-db EXPORTS
        env:
          GEONATURE_CONFIG_FILE: dependencies/GeoNature/config/test_config.toml
      - name: Test with pytest
        run: |
          pytest -v --cov --cov-report xml
        env:
          GEONATURE_CONFIG_FILE: dependencies/GeoNature/config/test_config.toml
      - name: Upload coverage to Codecov
        if: ${{ matrix.name == 'Debian 11' }}
        uses: codecov/codecov-action@v2
        with:
          flags: pytest
